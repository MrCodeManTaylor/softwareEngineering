/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stocksnstuff.gui;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import stocksnstuff.SessionControl.Logout;
import stocksnstuff.SessionControl.TableUpdateThread;
import stocksnstuff.generalResources.StringFormatter;
import stocksnstuff.database.DBIO.DBReader;
import stocksnstuff.database.DBIO.DBStockReader;
import stocksnstuff.database.DBIO.DBUserIO;
import stocksnstuff.generalResources.STFilter;
import stocksnstuff.generalResources.focusListener;

/**
 *
 * @author mtaylo35
 */
public final class UserGUI extends javax.swing.JFrame {

    private String name;
    private boolean filtered = false;
    private DBStockReader dbS;
    /**
     * Creates new form UserGUI
     *
     * @param name User identification string
     */
    //Specified Constructor
    public UserGUI(String name) {

        
        switch (detectType(name)) {
            case 0:
                DBReader dbR = new DBReader();
                dbR.scanDB(name, 0);
                String[] userDat = dbR.getUserInfo();
                this.name = userDat[1];
                break;
            case 1:
                this.name = name;
                break;
        }
        
        initComponents();
        setup();
        liveUpdate(true);
    }

    private void updateTable(){
        dbS.formatStockDB();
        dbS.formatJTable(dbS.getStockData());
        stockData.setModel(dbS.getStockTable());
        stockData.setDefaultEditor(Object.class, null);
    }
    
    private String formatTitle() {
        return "Stocks N Stuff | " + this.name;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        logout = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        StockData = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stockData = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        searchFilter = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(formatTitle());
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(102, 153, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setForeground(new java.awt.Color(51, 153, 255));

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        StockData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        stockData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Symbol", "Open", "High", "Low", "Close", "Net Change", "Net Change %"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockData.getTableHeader().setReorderingAllowed(false);
        stockData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(stockData);

        searchField.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        searchField.setText("Search...");

        searchFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFilterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Stocks N Stuff | Latest Data");

        javax.swing.GroupLayout StockDataLayout = new javax.swing.GroupLayout(StockData);
        StockData.setLayout(StockDataLayout);
        StockDataLayout.setHorizontalGroup(
            StockDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StockDataLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(StockDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockDataLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );
        StockDataLayout.setVerticalGroup(
            StockDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StockDataLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(StockDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(StockDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(searchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        jTabbedPane1.addTab("Home", StockData);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(this.name);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:

        //We need to terminate the session...
        Logout logoutObj = new Logout(this);
        logoutObj.endSession();

        //restore to default state...
        GuestGUI uG;
        uG = new GuestGUI();
        uG.setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    public int detectType(String data) {
        if (data.contains("@")) {
            return 0;
        } else {
            return 1;
        }
    }

    public String[] getRowData(int row) {
        String[] stockDat = new String[7];
        for (int i = 0; i < 7; i++) {
            stockDat[i] = stockData.getValueAt(row, i).toString();
        }
        return stockDat;
    }

    private void stockDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockDataMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int row = stockData.rowAtPoint(evt.getPoint());
            String[] stockDat = getRowData(row);
            String msg = stockData.getValueAt(row, 0).toString();
            String[] options = {"Yes", "No", "Untrack"};
            int response = JOptionPane.showOptionDialog(rootPane, "Add " + msg + " to your tracked stocks?", "Track | " + msg,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            switch (response) {
                case 0:
                    //They wish to track the stock
                    switch (detectType(name)) {
                        case 0:
                            //Email type
                            DBReader dbR = new DBReader();
                            dbR.scanDB(name, 0);
                            String[] userDat = dbR.getUserInfo();
                            StringFormatter sf = new StringFormatter();
                            DBUserIO uIO = new DBUserIO(userDat[1]);
                            uIO.trackStock(sf.formatLine(stockDat));
                            break;
                        case 1:
                            //Username type
                            uIO = new DBUserIO(name);
                            sf = new StringFormatter();
                            uIO.trackStock(sf.formatLine(stockDat));
                            break;
                    }
                    break;
                case 1:
                    //They do not wish to track the stock
                    break;
                case 2:
                    //They wish to untrack the stock
                    switch (detectType(name)) {
                        case 0:
                            DBReader dbR = new DBReader();
                            dbR.scanDB(name, 0);
                            String[] userDat = dbR.getUserInfo();
                            StringFormatter sf = new StringFormatter();
                            DBUserIO uIO = new DBUserIO(userDat[1]);
                            uIO.removeStock(sf.formatLine(stockDat));
                            break;
                        case 1:
                            uIO = new DBUserIO(name);
                            sf = new StringFormatter();
                            uIO.removeStock(sf.formatLine(stockDat));
                            break;
                    }
            }
        }
    }//GEN-LAST:event_stockDataMouseClicked

    private void searchFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFilterActionPerformed
        // TODO add your handling code here:

        if (!searchField.getText().equals("")) {
            //Extract filtration schema and recreate Table Model Obj
            String searchFilter = searchField.getText();
            STFilter sTF = new STFilter(searchField.getText());
            stockData.setModel(sTF.getTModel());
            stockData.setDefaultEditor(Object.class, null);
            this.filtered = true;
        } else {
            //Detect if table has been filtered, if so reinstate default table.
            if(filtered){
                //Reinstate table
                stockData.setModel(dbS.getStockTable());
                stockData.setDefaultEditor(Object.class, null);
            }else{
                //DO nothing
                
            }
            
        }
    }//GEN-LAST:event_searchFilterActionPerformed

    public void setup() {

        try {
            Icon Icon;
            String f = new File(".").getCanonicalPath() + "\\src\\resources\\searchIcon.bmp";
            File file = new File(f);
            Image img;
            img = ImageIO.read(file);
            focusListener fL = new focusListener(searchField, "Search...");
            searchField.addFocusListener(fL.getFocusListener());
            searchFilter.setIcon(new ImageIcon(img));
            
            //initialize jtable data
                dbS = new DBStockReader();
                if (!dbS.formatStockDB()) {
                    JOptionPane.showMessageDialog(rootPane, "Something went wrong, quitting...");
                } else {
                    if (!dbS.formatJTable(dbS.getStockData())) {
                        JOptionPane.showMessageDialog(rootPane, "Something went wrong, quitting...");
                    } else {
                        stockData.setModel(dbS.getStockTable());
                        stockData.setDefaultEditor(Object.class, null);
                    }

                }
        } catch (IOException ex) {
            Logger.getLogger(GuestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private void liveUpdate(Boolean val) {
        if (val) {
            Timer timer = new Timer(150000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    TableUpdateThread tut = new TableUpdateThread();
                    tut.run();
                    stockData.setModel(tut.getStockTableUpdate());
                    stockData.setDefaultEditor(Object.class, null);
                }
            });
            timer.setRepeats(this.isEnabled());
            timer.start();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel StockData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logout;
    private javax.swing.JTextField searchField;
    private javax.swing.JToggleButton searchFilter;
    private javax.swing.JTable stockData;
    // End of variables declaration//GEN-END:variables
}
